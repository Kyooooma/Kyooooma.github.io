[{"title":"2023牛客多校02","date":"2023-07-22T07:53:25.000Z","url":"/2023/07/22/2023%E7%89%9B%E5%AE%A2%E5%A4%9A%E6%A0%A102/","tags":[["2023多校训练","/tags/2023%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83/"]],"categories":[["2023多校训练","/categories/2023%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83/"]],"content":"题目来自: 2023牛客暑期多校训练营2 Solved Rank A B C D E F G H I J K L M 6 / 13 196 / 1526 - - - O O O Ø O O - O - - Ø 赛后通过 O 在比赛中通过 ! 尝试了但是失败了 - 没有尝试 D - The Game of Eating SOLUTION 贪心，从后往前就是对的 CODE E - Square SOLUTION 签到题 CODE F - Link with Chess Game SOLUTION 打表找规律 CODE G - Link with Centrally Symmetric Strings SOLUTION 仔细分析就会发现这是个魔改了匹配规则的求回文串，任意选一种求回文串算法就行。 CODE1 Hash CODE2 Manacher H - 0 and 1 in BIT SOLUTION 假设 $x$ 的二进制串长度为 $k$，那么一次A操作相当于将 $x$ 变为 $2^k - 1 - x$，一次B操作即为 $x = x + 1$，再考虑B操作在A操作前的情况，即 $x = 2^k - 1 - (x + 1)$，也就是B操作由加1变为了减1。于是就能发现B操作对于最终的 $x$ 的贡献为 $1$ 还是 $-1$，取决于这个B操作后的A操作个数的奇偶性，由于题目还需要区间询问，因此可以用线段树维护分开维护加和减的贡献。 CODE I - Link with Gomoku SOLUTION 签到构造题，感觉乱构造都能过。需要注意的是先手下的棋子个数要等于后手或者比后手多1。 CODE K - Box SOLUTION dp CODE "},{"title":"2023杭电多校02","date":"2023-07-22T07:53:14.000Z","url":"/2023/07/22/2023%E6%9D%AD%E7%94%B5%E5%A4%9A%E6%A0%A102/","tags":[["2023多校训练","/tags/2023%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83/"]],"categories":[["2023多校训练","/categories/2023%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83/"]],"content":"题目来自: 2023“钉耙编程”中国大学生算法设计超级联赛（2） Solved Rank A B C D E F G H I J K L M 6 / 13 168 / 1200 O O - O - - O - O - O Ø - Ø 赛后通过 O 在比赛中通过 ! 尝试了但是失败了 - 没有尝试 A - Alice Game SOLUTION 打表结论题 CODE B - Binary Number SOLUTION 分类讨论的签到题 CODE D - Card Game SOLUTION 推柿子（打表）签到题 CODE G - foreverlasting and fried-chicken SOLUTION 枚举度最大的两个点，再求出与这两个点同时有边的点个数，可以使用bitset。 CODE I - String Problem SOLUTION 签到题 CODE K - SPY finding NPY SOLUTION 推柿子，之后可以在 $O(n^2)$ 内预处理所有答案 CODE L - Coin SOLUTION 最大流，源点连向每个点的流量为1，每一轮需要拆出一个新点，与之前的旧点（若有）连边的流量为 $a_i$，并与这轮中另一个点建一条正流量为1逆流量也为1点边，最后 $k$ 个点连向汇点，流量为 $a_i$，之后跑dinic即可。 undefined ps. 赛中觉得3000个点 3000条边的最大流不太可行就否了。 CODE "},{"title":"2023杭电多校01","date":"2023-07-22T06:32:37.000Z","url":"/2023/07/22/2023%E6%9D%AD%E7%94%B5%E5%A4%9A%E6%A0%A101/","tags":[["2023多校训练","/tags/2023%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83/"]],"categories":[["2023多校训练","/categories/2023%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83/"]],"content":"题目来自: 2023“钉耙编程”中国大学生算法设计超级联赛（1） Solved Rank A B C D E F G H I J K L 6 / 12 70 / 1200 Ø O - - O - - O O O - O Ø 赛后通过 O 在比赛中通过 ! 尝试了但是失败了 - 没有尝试 A - Hide-And-Seek Game SOLUTION 对于每次询问，可以 $O(n)$ 找出两人都可以到达的点并记录下到达的时刻 (记作 $t1$ 和 $t2$ ) 以及两人路径的长度 $len1$ 和 $len2$。 设 $x$ 为两人同时到达该点的时刻，则有 \\begin{cases} \\ x = t1 + k1 \\times len1 \\\\ \\ x = t2 + k2 \\times len2 \\\\ \\end{cases}这是经典的excrt式子，使用exgcd求解即可。 若对每个情况都是用exgcd求解，这样的复杂度是 $O(mnlog(n))$的（虽然也能通过）。不过注意到对于同一组询问来说，$len1$ 和 $len2$ 是保持不变的，因此在最开始只需要求一次 exgcd 即可，这样的复杂度是 $O(mn + mlog(n))$。 undefined ps.赛中把某个减号写成加号了一直没发现( CODE B - City Upgrading SOLUTION 树形dp CODE E - Cyclically Isomorphic SOLUTION 板子题，求字符串环的最小表示 CODE H - Umamusume SOLUTION 骗骗题，仔细分析一下就会发现商店中很多道具是多余的（bugaibaibugai秒了）。 CODE I - Assertion SOLUTION 签到题 CODE J - Easy problem I SOLUTION 关键在于题目中询问的 x_i \\le x_{i+1} ，也就是说一旦某次操作是 x - a_i，那么之后每次都是 x - a_i。 那么就可以用势能线段树维护这个东西。具体来说，需要把要维护的东西分为两部分，一部分是未做过取负操作的 $a$，另一部分是已经做过至少一次取负操作的 $a$。 对于第一部分，可以维护最小值、区间中处于该部分的个数、区间和以及减法的懒标记。 对于第二部分，可以维护区间和、区间中处于该部分的个数、以及加法和乘法的懒标记（将取负视作乘上 $-1$）。 那么在对某个区间操作时，若第一部分的最小值比 $x$ 大，则可以直接计算贡献（因为此次操作不会造成第一部分的个数减少），无需往下递归；否则则说明第一部分中的个数需要减少了，则需要递归到叶子将这个点从第一部分转化成第二部分，然而这个操作最多只会进行 $n$ 次，因此这么维护对于单次询问的时间复杂度是 $O(log(n))$。 因此总时间复杂度为 $O(mlog(n))$。 CODE L - Play on Tree SOLUTION 树上博弈结论题，再套了个简单换根dp CODE "},{"title":"2022CCPC广州复盘","date":"2022-11-12T18:40:47.000Z","url":"/2022/11/13/2022CCPC%E5%B9%BF%E5%B7%9E%E5%A4%8D%E7%9B%98/","tags":[["比赛记录","/tags/%E6%AF%94%E8%B5%9B%E8%AE%B0%E5%BD%95/"]],"categories":[["比赛记录","/categories/%E6%AF%94%E8%B5%9B%E8%AE%B0%E5%BD%95/"]],"content":"经历上周的沈阳打铜之后，这周广州又打铜了，而且还是差点打铁的水平，哈哈。 热身赛热身赛看了眼四个题除了C题外全都做过，有三个是去年广州的原题，写了两个简单的之后，帆哥看了眼C说这不是一眼三分吗，不过我说我想写写B就让我上机了。B是2021广州的G题，是个莫队套线段树，我信誓旦旦的说这题我做过，结果我第二次写没过，哈哈。后来结束之后找了好久的原因发现是线段树合并的时候多求了个gcd导致TLE啦，并且发现以前写的时候跑的慢是因为块大小算错了(少开了个更号)。改完之后在cf上跑了2s就AC了。 正式赛正式赛当天7点就起了(貌似是近半个月起的最早的)。然后去比赛场地布置完之后开始恰mdd早餐。开局zty就读错了签到题的题意，导致帆哥推了好久的样例推不出来开始质疑题意，于是理解正确题意之后就签完了第一个到。之后第二题由于我没看清楚题目的加粗部分导致判断的范围多了$2$然后就拿到了全场第一个WA。第三个签到看着像个博弈，玩了一会之后zty说这不是摁拿就完了然后就过了。之后，三个人就戴上了痛苦面具。 我们先看了I题，我看了眼范围和输出就说这肯定是个树上背包，可是研究了半天都不会 有多个感染源 的情况。然后帆哥跟我们说题目给的每个点为感染源的概率是 $\\frac{a_i}{\\sum a_j}$ ， 所以肯定只有一个点是感染源，此时我和zty都不相信。又想了一会之后我感觉有多个感染源的情况是不可做的，然后试着把样例给的概率加起来，发现正好等于$1$，这时我才知道帆哥说的是对的。于是我开始想怎么处理只有一个感染源的情况（此时大概过了2h30min）。 这中途队友看了M和C，对于M我感觉一眼数位dp，但可惜我上一次做到数位dp还是在上一次，已经完全不记得该怎么处理了，然后我问了问帆哥和zty怎么做数位dp，结果我们都不会。 对于C题的构造帆哥有点想法，就上去敲了，此时我还在想怎么树上背包。之后我想了个转移式，在帆哥下机的途中敲了敲，这期间就是我们两个互相上下机，谁卡了就换另一个，调了好久我终于成功算出了以某个点为感染源时的答案，可惜按照我的做法得对$n$个点每个点为根跑一遍树上背包，时间复杂度来到了$O(n^3)$。 此时帆哥的C题还在WA，zty在搞M题。之后我想了想好像能通过换根来计算其他点为根时的答案，但是敲到一半发现背包好像不能撤销，然后就寄了，我在望着代码发呆。 最后C题也没有调出来，I题我根本不知道要怎么优化，M题也不知道该咋搞，复刻了当初CCPC Final，三线开题，三线卡题，最后封榜前rk128，于是就寄了。 后记比较意外的是揭榜之后发现我们在rk135，居然没有打铁。 然后发现I题可以多开一个状态(赛中我在想的都是通过一个状态直接转移)，这样就能用树上背包直接处理出所有答案了，而且I题的定位还是简单题，而且比赛前我还专门练习过树上背包，然而我却没写出来，还是太菜了。 现在我们队的状态可以说是越来越差，一场不如一场，这个趋势的话可能下周就铁了吧。 最近真的好忙(又要应付课程又要出题管理新生啥的)，训练比去年这个时候少了也是事实，打算下周多抽空训练训练恢复点状态吧。"},{"title":"来杯拿铁 队伍训练总览","date":"2022-11-08T10:40:47.000Z","url":"/2022/11/08/%E8%AE%AD%E7%BB%83%E6%80%BB%E8%A7%88/","tags":[["组队训练","/tags/%E7%BB%84%E9%98%9F%E8%AE%AD%E7%BB%83/"]],"categories":[["组队训练","/categories/%E7%BB%84%E9%98%9F%E8%AE%AD%E7%BB%83/"]],"content":" Name solved Rank A B C D E F G H I J K L M N 2021 ICPC Southeastern Europe Regional Contest 8 / 14 31 / 126 O - Ø - - O O - - O Ø O - O 2019-2020 10th BSUIR Open Programming Championship. Semifinal 6 / 13 22 / 282 - - - - - O - O O O O - O 2019-2020 ICPC Southwestern European Regional Programming Contest (SWERC 2019-20) 10 / 12 13 / 104 O O O Ø - O Ø Ø O O O - 2015 ACM-ICPC Asia EC-Final Contest 6 / 13 53 / 293 O O - O - O - - - - - O O 2022 Shanghai Collegiate Programming Contest 10 / 14 20 / 177 O Ø Ø - O - O O - Ø - O O O 2017-2018 ICPC Central Quarter Final of Northeastern European Regional Collegiate Programming Contest 9 / 12 1 / 36 O O - O O - - O O O O O The 2021 CCPC Guangzhou Onsite 5 / 12 39 / 263 - - O - - O Ø O O - - - 2019 ICPC Universidad Nacional de Colombia Programming Contest 12 / 12 - / - Ø O Ø O Ø O O Ø O Ø O Ø The 2021 CCPC Guilin Onsite (XXII Open Cup, Grand Prix of EDG) 7 / 12 170 / 427 O O - Ø O - O - O - Ø - 2021-2022 Russia Team Open, High School Programming Contest (VKOSHP XXII) 8 / 12 101 / 317 O - - O O O O Ø Ø - O - 2021 Summer Petrozavodsk Camp, Day 3: IQ test (XXII Open Cup, Grand Prix of IMO) 5 / 13 114 / 171 O - - - O O - Ø - - - - O 2022 China Collegiate Programming Contest (CCPC) Guilin Site 6 / 13 150 / 326 O - O - O - Ø - - - - Ø O Ø 赛后通过 O 在比赛中通过 ! 尝试了但是失败了 - 没有尝试 Rank指gym上去掉vp的榜单中的排名 "},{"title":"2022ICPC沈阳复盘","date":"2022-11-05T18:40:47.000Z","url":"/2022/11/06/2022ICPC%E6%B2%88%E9%98%B3%E5%A4%8D%E7%9B%98/","tags":[["比赛记录","/tags/%E6%AF%94%E8%B5%9B%E8%AE%B0%E5%BD%95/"]],"categories":[["比赛记录","/categories/%E6%AF%94%E8%B5%9B%E8%AE%B0%E5%BD%95/"]],"content":"练习两年半，本来觉得不管怎么样至少都能拿个银吧，结果铜了，还是菜了。 热身赛热身赛刚好遇上志愿者期中考试，差点就咕了。不过最后还是拿到了账号写了两个题。 结果第三题就不会了，好像是个$n^2$的dp，想了很久都不知道咋做，赛后查了查题解发现是2020金川的原题，不过题解好像都是开了$n^2$的空间，不知道$512MB$是怎么开下$1e8$的数组的。有意思的是正想着哪里补题的时候发现gym上刚传上2020和2019的金川题目。 第四题是去年沈阳站的原题，是个寄算几何，直接溜了。 正式赛开局很顺利，队友很快找到了两个签到，15min的时候就AC完了，此时rk9。 然后就是我正开看题，zty倒开，333lfy随机看题。然后zty找到了第三个题L，是个炉石传说的简单模拟题，于是333lfy直接开始打。结果打完没过样例，调了很久发现题意假了，改正后还是没过样例。最后发现对局中途的选择也是要记入概率中的，于是多传了个概率的参数之后AC了，此时比赛过去了2h，rk46。 于是漫长的3h开始了。我从前看过来没有一道会的题，然后看了看榜发现了有个F题貌似可做，于是看了下F，发现是个构造。之后三个人就一起开始胡乱猜构造方法，也打了表，但是啥也没发现。 现在想想应该早就换题的，剩下的题说不定还有能做的。但是当时看着榜上一堆人过了的F（甚至后排队也有很多过了的），我们却不会，所以仍旧头铁搞这构造，想着过了就至少有银了，结果就是罚坐三小时，看着表也找不出规律。 后记赛后看了题解只觉得自己是个弱智，果然还是太菜了。 我们队在之前的vp赛中状态就不大好，每次都会卡在一些简单题上（比如有人复杂度算不对以及不会贪心）。 希望后三场能把状态调整过来吧。"},{"title":"2022CCPC桂林","date":"2022-11-04T10:40:47.000Z","url":"/2022/11/04/2022CCPC%E6%A1%82%E6%9E%97/","tags":[["组队训练","/tags/%E7%BB%84%E9%98%9F%E8%AE%AD%E7%BB%83/"]],"categories":[["组队训练","/categories/%E7%BB%84%E9%98%9F%E8%AE%AD%E7%BB%83/"]],"content":"题目来自: 2022 China Collegiate Programming Contest (CCPC) Guilin Site vp四题打铜了…… C - Array Concatenation SOLUTION 骗骗题，实际只有两种情况。 CODE E - Draw a triangle SOLUTION 推出式子发现与$gcd$有关系，可以用$exgcd$求解然后分类讨论。 CODE L - Largest Unique Wins SOLUTION 聪明构造题，我是笨比。 CODE G - Group Homework SOLUTION 换根dp，找不相交的两条最长带权路径，和最大的四条链。 CODE "},{"title":"2022-10-30周赛","date":"2022-10-30T10:40:47.000Z","url":"/2022/10/30/2022-10-30%E5%91%A8%E8%B5%9B/","tags":[["组队训练","/tags/%E7%BB%84%E9%98%9F%E8%AE%AD%E7%BB%83/"]],"categories":[["组队训练","/categories/%E7%BB%84%E9%98%9F%E8%AE%AD%E7%BB%83/"]],"content":"题目来自: 2021 Summer Petrozavodsk Camp, Day 3: IQ test (XXII Open Cup, Grand Prix of IMO) E - Eulerian? SOLUTION 交互题。 注意到每次问一半的话得到答案的概率是$\\frac{1}{2}$，于是每次随机问一半就行，如果wa了就去买彩票吧。 CODE H - Hamiltonian SOLUTION 挺好玩的构造题，vp的时候三个人玩了一个多小时没凑出解来。 看了眼题解发现非常简单……只要构造一张满图加一条链就行。 CODE "},{"title":"2022-10-29周赛","date":"2022-10-29T10:40:47.000Z","url":"/2022/10/29/2022-10-29%E5%91%A8%E8%B5%9B/","tags":[["组队训练","/tags/%E7%BB%84%E9%98%9F%E8%AE%AD%E7%BB%83/"]],"categories":[["组队训练","/categories/%E7%BB%84%E9%98%9F%E8%AE%AD%E7%BB%83/"]],"content":"题目来自: 2021-2022 Russia Team Open, High School Programming Contest (VKOSHP XXII) 有人不会算复杂度啦，把$O(26^2n)$的算成了$O(26!\\times 26n)$了，然后就没敢写。 I - Wheel of Fortune SOLUTION dfs爆搜，一共只会有$26$层。 CODE H - Lots of Parabolas SOLUTION 三分搜索。 属实没发现它居然是个单峰。 CODE "},{"title":"2021CCPC桂林","date":"2022-10-28T10:40:47.000Z","url":"/2022/10/28/2021CCPC%E6%A1%82%E6%9E%97/","tags":[["组队训练","/tags/%E7%BB%84%E9%98%9F%E8%AE%AD%E7%BB%83/"]],"categories":[["组队训练","/categories/%E7%BB%84%E9%98%9F%E8%AE%AD%E7%BB%83/"]],"content":"题目来自: The 2021 CCPC Guilin Onsite (XXII Open Cup, Grand Prix of EDG) 过了一车的贪心不会… D - Assumption is All You Need SOLUTION 贪心，尽量让大的换到前面来让逆序对尽可能多。 CODE B - A Plus B Problem SOLUTION 经典线段树区间找最右边的0和9。 虽然经典，但是我vp写的时候bug还是一堆。 CODE K - Tax SOLUTION 看了题解瞬间恍然大悟，顿时感觉自己不太聪明。 在最短路的情况下最多只有$3^{\\frac{n}{3}}$种情况，于是爆搜即可。 CODE "},{"title":"2022-10-23周赛","date":"2022-10-23T10:40:47.000Z","url":"/2022/10/23/2022-10-23%E5%91%A8%E8%B5%9B/","tags":[["组队训练","/tags/%E7%BB%84%E9%98%9F%E8%AE%AD%E7%BB%83/"]],"categories":[["组队训练","/categories/%E7%BB%84%E9%98%9F%E8%AE%AD%E7%BB%83/"]],"content":"题目来自: 2019 ICPC Universidad Nacional de Colombia Programming Contest 这场发挥的巨拉胯，连简单dp都不会了…感觉其他题都是会做的可是都没看。 C - Common Subsequence SOLUTION dp CODE A - Amazon SOLUTION 判断直线垂直 CODE J - Jail Destruction SOLUTION 势能线段树 CODE L - Liquid X SOLUTION 交互+二分 CODE H - Hardest Challenge SOLUTION 折半搜索 CODE E - Extreme Image SOLUTION 双指针 + 线段树 CODE "},{"title":"2021CCPC广州","date":"2022-10-22T10:40:47.000Z","url":"/2022/10/22/2021CCPC%E5%B9%BF%E5%B7%9E/","tags":[["组队训练","/tags/%E7%BB%84%E9%98%9F%E8%AE%AD%E7%BB%83/"]],"categories":[["组队训练","/categories/%E7%BB%84%E9%98%9F%E8%AE%AD%E7%BB%83/"]],"content":"题目来自: The 2021 CCPC Guangzhou Onsite F - Cactus SOLUTION 打表发现与具体是什么数无关，答案都是斐波那契。 CODE H - Three Integers SOLUTION 分类讨论 CODE C - Necklace SOLUTION 一开始还以为是什么牛逼线性做法，还给了个神秘快读。 后来试了试二分答案是能过的。 CODE G - Slope SOLUTION 看了题解才知道原来莫队真正的复杂度。 时间复杂度 $O(\\frac{n^2}{S} + mS)$, $n$为长度, $m$个询问, 块长为 $S$ (一般取 $\\sqrt{n}$ 或 $\\frac{n}{\\sqrt{m}}$) 线段树部分我感觉还是非常简单的，直接维护左端和右端暴力合并即可（可能是cf评测姬比较快才让我过了）。 update: 原来之前跑的慢是因为块长写了70忘记开更号了，哈哈。 CODE "},{"title":"2022-10-21周赛","date":"2022-10-21T10:40:47.000Z","url":"/2022/10/21/2022-10-21%E5%91%A8%E8%B5%9B/","tags":[["组队训练","/tags/%E7%BB%84%E9%98%9F%E8%AE%AD%E7%BB%83/"]],"categories":[["组队训练","/categories/%E7%BB%84%E9%98%9F%E8%AE%AD%E7%BB%83/"]],"content":"题目来自: 2017-2018 ICPC Central Quarter Final of Northeastern European Regional Collegiate Programming Contest B - Rectangles SOLUTION 可以推出答案和$n$以及$n+1$的因子有关系，分解质因数爆搜就行了。 CODE K - Tower of Hanoi SOLUTION 打表找规律，可以发现只有两种循环方式，而且是和层数有关系的。 用字典树维护即可。 CODE L - Fence SOLUTION 凸包周长模板题。 CODE "},{"title":"2022上海省赛","date":"2022-10-16T11:22:47.000Z","url":"/2022/10/16/2022%E4%B8%8A%E6%B5%B7%E7%9C%81%E8%B5%9B/","tags":[["组队训练","/tags/%E7%BB%84%E9%98%9F%E8%AE%AD%E7%BB%83/"]],"categories":[["组队训练","/categories/%E7%BB%84%E9%98%9F%E8%AE%AD%E7%BB%83/"]],"content":"题目来自: 2022 Shanghai Collegiate Programming Contest A - Another A+B Problem SOLUTION 爆搜 CODE B - Bracket Query SOLUTION 差分约束 + 并查集 CODE J - Just Some Bad Memory SOLUTION tarjan 分类讨论，判断是否为仙人掌树。 CODE L - Last Warning of the Competition Finance Officer SOLUTION 注意到不同长度只有$\\sqrt{n}$种，直接暴力哈希，建图之后dp即可。 当然用ac自动机的话复杂度会更加优秀。 CODE "},{"title":"2022年“图森未来杯”全国程序设计邀请赛","date":"2022-10-14T16:24:20.000Z","url":"/2022/10/15/2022%E5%B9%B4%E2%80%9C%E5%9B%BE%E6%A3%AE%E6%9C%AA%E6%9D%A5%E6%9D%AF%E2%80%9D%E5%85%A8%E5%9B%BD%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E9%82%80%E8%AF%B7%E8%B5%9B/","tags":[["个人训练","/tags/%E4%B8%AA%E4%BA%BA%E8%AE%AD%E7%BB%83/"]],"categories":[["个人训练","/categories/%E4%B8%AA%E4%BA%BA%E8%AE%AD%E7%BB%83/"]],"content":"题目来自: 2022年“图森未来杯”全国程序设计邀请赛 题集密码 ecnusei20 A - ECNU知多少华东师范大学大学软件工程学院创建于XXXX年1月，是国家首批35所示范性软件学院之一，也是全国师范院校中唯一获准成立的示范性软件学院。 你能帮忙恢复这句话中缺失的信息吗？ CODE B - 你的数太多了给定一个大小为 $n$ 的有序可重数列，要求把其中出现了超过 1 次的数字都去掉，求操作之后的数列。 对于所有数据满足：$1≤n≤10^5,1≤a_i≤10^9$。 CODE C - 五折券现在你走进一个大商场，打算买 $n$ 个商品，其中第 $i$ 个商品的价格为 $a_i$ 元，同时你有 $m$ 张五折券。 若你买第 $i$ 个商品使用了 $Y$ 张打折券，则他购买这个商品只需要花费 $\\lfloor \\frac{a_i}{2^Y} \\rfloor$ 元。 现在请你计算一下你购买这些商品至少要花费多少元？ 对于所有数据满足：$1≤n≤10^5，1≤m≤2×10^5，1≤a_i≤10^9$。 SOLUTION 贪心, 每次取最大的数除以2即可 CODE D - 正多边形给定二维格点上的n的点$(x_1,y_1),(x_2,y_2),…,(x_n,y_n)$，是否存在$m$个点能构成正$m$边形？ SOLUTION 赛中在纸上画了半天, 发现好像画不出端点都在整数点上的正三角形, 然后就猜了一下只有正四边形是可能的, 于是就AC了 只需要暴力判断四个点能不能构成正四边形 对于所有数据满足：$3≤m&lt;n≤10^2,−10^3≤x_i,y_i≤10^3$。 CODE E - 无独有偶（Easy）对于 $n$ 名同学，每个人都有一个对应的实力值 $a_i$（实力值可能相同），组成序列 $a_1,⋯,a_n$。本质不同的实力值子序列是指长度不同或长度相同但对应位置上数不同的实力值子序列。 现在你需要回答有多少至少出现 两次 的本质不同实力值子序列。 对于所有数据满足：$1\\le n\\le 20$，$1\\le a_i\\le 10^9$。 SOLUTION 注意到$n$只有20, 暴力跑子序列即可, 对于判断我用了hash, (其他的判断方式比如map"},{"title":"2022-10-14周赛","date":"2022-10-14T11:22:47.000Z","url":"/2022/10/14/2022-10-14%E5%91%A8%E8%B5%9B/","tags":[["组队训练","/tags/%E7%BB%84%E9%98%9F%E8%AE%AD%E7%BB%83/"]],"categories":[["组队训练","/categories/%E7%BB%84%E9%98%9F%E8%AE%AD%E7%BB%83/"]],"content":"题目来自: 2015 ACM-ICPC Asia EC-Final Contest A - Boxes and Balls签到, 不过要注意精度 CODE M - November 11th签到, 有$n$行座位, 要求每个人的左右都没有人坐, 而且给了$k$个位置不能坐人, 问最多和最少能坐几个人 SOLUTION 对一段连续的来讲, 最多就是 $\\lceil \\frac{n}{2} \\rceil$ , 最少就是 $\\lceil \\frac{n}{3} \\rceil$ CODE D - Change你有价值$A$的整钱, 现在需要凑出价值为$B$的钱, 可以多次使用一个自动售货机, 每次使用消耗任意数量的钱$x$, 但是找零的钱是随机的(只保证总和相等), 问最少花多少钱能刚好凑出$B$ SOLUTION You have as much time as you want to use the vending machine. 原来这句话的意思是可以使用多次售货机 感觉是整场比赛最烂的题, 一开始看成了只用一次, 写了个背包但是怎么都过不了, 后来过了几个小时才发现是可以多次使用, 于是和2取了个min CODE L - Multiplication Table咕 SOLUTION 咕 CODE B - Business Cycle咕 SOLUTION 咕 CODE F - Hungry Game of Ants咕 SOLUTION 咕 CODE "},{"title":"2022ICPC网络赛2","date":"2022-09-26T10:40:47.000Z","url":"/2022/09/26/2022ICPC%E7%BD%91%E7%BB%9C%E8%B5%9B2/","tags":[["组队训练","/tags/%E7%BB%84%E9%98%9F%E8%AE%AD%E7%BB%83/"]],"categories":[["组队训练","/categories/%E7%BB%84%E9%98%9F%E8%AE%AD%E7%BB%83/"]],"content":"L Quadruple给长为$n(n \\le 2\\times 10^6)$的只包含$’I’, ‘C’, ‘P’$的字符串以及$q(q \\le 2 \\times 10^6)$ 个询问, 询问由给出的$x, a, b, p$生成, 每次询问问一个区间的子串中有多少个$ICPC$的子序列 SOLUTION 用前缀和维护到当前位置$i$为止的$I$, $IC$, $ICP$, $ICPC$, $CP$, $CPC$, $PC$, $P$, $C$的子序列个数, 然后对于询问区间只需要简单容斥一下减去不属于这个区间所产生的$ICPC$个数即可. 赛中一眼线段树的做法, 结果被卡成傻逼, 后来本地随便造了一组都跑了12s时才意识到不对劲, 在最后十分钟想到了正解但是没有写完…… 时间复杂度: $O(n)$ CODE "},{"title":"2022-09-24周赛","date":"2022-09-23T18:40:47.000Z","url":"/2022/09/24/2022-09-24%E5%91%A8%E8%B5%9B/","tags":[["组队训练","/tags/%E7%BB%84%E9%98%9F%E8%AE%AD%E7%BB%83/"]],"categories":[["组队训练","/categories/%E7%BB%84%E9%98%9F%E8%AE%AD%E7%BB%83/"]],"content":"题目来自: 2019-2020 ICPC Southwestern European Regional Programming Contest (SWERC 2019-20) B - Biodiversity签到, 问是否存在一个出现了一半次数的字符串 CODE I - Rats签到, 抄一下柿子就行 CODE C - Ants签到, 给一堆长度小于$100$位的数(可以有负数), 问最小的未出现的自然数是啥 CODE F - Icebergs签到, 给若干个不重叠的多边形, 求总面积 SOLUTION 叉乘一下就行 CODE A - Environment-Friendly Travel给出起点$s$和终点$d$, 以及最多行驶里程$B(\\le 200)$, 又给出了$n(\\le 1000)$个站点的图以及每条边的$CO_2$花费量(即$C_i$), 初始你在起点能开车前往任意一个点, 但是花费量是$C_0(C_0 &gt; C_i)$. 定义$dist(a, b) = \\lceil \\sqrt{(x_a - x_b) ^ 2 + (y_a - y_b) ^ 2}\\rceil$, $cost(a, b, i) = C_i \\times dist(a, b)$, 求到达终点且满足里程小于等于$B$时最小的$cost$ SOLUTION 注意到$B$只有$200$, 可以考虑用$dis[i][j]$ 表示到达$i$点且行驶了$j$里程时的最小$cost$. 所以用最短路的方式转移即可. CODE K - Birdwatching给一张$n$点$m$边的有向图和一个点$T$, 问满足从$T’$走到$T$的所有路径中，一定包含$T’ → T$这条边的点$T’$有哪些 SOLUTION 首先$T’$必须有一条连向$T$的边, 又因为题目要求的是所有路径, 所以从$T’$出发不存在第二条到$T$点的路径 如果把原图的边全都反向, 那么如果这个点被两个与$T$直连的点到达了, 这个点就不是答案中的点, 所以可以对这张反向图进行$BFS$, 顺便标记一下即可(感觉有点瞎搞) CODE G - Swapping Places给出$S(S \\le 200)$种字符串, $L(L \\le 10000)$种关系, 长度$N(\\le 100000)$的字符串序列, 若两种字符串存在关系且在序列中位置相邻, 那么就可以交换它们的位置, 求可以得到的字典序最小的序列. SOLUTION 考虑两种没有关系的字符串, 它们不可能通过这种交换来做到交换它们两个的先后顺序, 也就是说, 对于两种没有关系的字符串, 它们的先后顺序是固定的. 那么, 可以对原序列中所有没有关系的字符串建一张图, 在这张图上跑出一个字典序最小的拓扑序就是答案了. CODE D - Gnalcats有一个无限长的简单元素序列, 以及若干个操作($X$表示后续无限个元素): $C$ : 复制第一个元素 即 $a−X → a-a-X$ $D$ : 删除第一个元素 即 $a−X → X$ $L$ : 将第一个元素变成复合它的左元素, 若第一个不是复合元素则失败并停止后续所有操作 即 $(a, b)-X → a-X$ $P$ : 将第一个元素作为左元素和第二个元素作为右元素复合为一个新元素 即 $a-b-X→(a,b)-X$ $R$ : 将第一个元素变成复合它的右元素, 若第一个不是复合元素则失败并停止后续所有操作 即 $(a,b)-X→b-X$ $S$ : 改变第一个元素和第二个元素的顺序 即 $a-b-X→b-a-X$ $U$ : 将第一个元素变成复合它的两个元素, 若第一个不是复合元素则失败并停止后续所有操作 即 $(a,b)-X→a-b-X$ 给出两个操作序列, 问这两个操作序列生成的最后的元素序列是否相同 SOLUTION 直接用一个类似栈的东西模拟操作 要注意的是, 虽然复合操作最后会连出一个二叉树, 但是最后判断两个序列相同时不能用直接递归整棵树的方式, 否则会$TLE$. 可以对复合操作进行$Hash$存储(CODE1的做法), 但是后来想了想发现可以直接用map 来存每个元素, 比一开始的做法简单了很多 CODE1 CODE2 H - Pseudo-Random Number Generator题目给出了一个奇怪的序列生成器, 问这个序列的前$n(0\\le n \\le 2^{63}-1 )$项里有多少个偶数 $M = 2^{40}$ $S(0)=0x600DCAFE$ $S(n+1)=(S(n)+(S(n-1) &gt;&gt; 20) + 12345)\\%M$ SOLUTION 因为有取模, 所以一定会存在环(循环节), 先跑了遍$Floyd$判环发现环的长度为$182129209$, 起点到环的距离是$350125310$, 因为时限只有$300ms$, 所以直接暴力跑肯定是不行的, 那么可以采用分块打表的方式, 在本地先暴力跑出每一块的答案, 然后就可以用$O(块长)$的复杂度算出答案了. 我这里选择的块长是$3\\times 10^7$ CODE "},{"title":"2022-09-23周赛","date":"2022-09-23T16:08:04.000Z","url":"/2022/09/24/2022-09-23%E5%91%A8%E8%B5%9B/","tags":[["组队训练","/tags/%E7%BB%84%E9%98%9F%E8%AE%AD%E7%BB%83/"]],"categories":[["组队训练","/categories/%E7%BB%84%E9%98%9F%E8%AE%AD%E7%BB%83/"]],"content":"题目来自2021-2022 ACM-ICPC Latin American Regional Programming Contest y1s1题是真的难读, 英语水平捉急了…(由于当天有新生宣讲会, 这场只打了4h) K - KIARA is a Recursive Acronym签到 问在给出的 n 个字符串中否存在一个可以由 n 个字符串的首字符组成的串 但是不知道为啥被卡常了一发( CODE F - Fields Division签到 给一张$n$点$m$边的连通图, 第$i$个点有$2^i$的权值, 需要将该图的点分成AB两部分, 使得各部分内部的点互相连通, 且两部分权值和尽可能相等, 若做不到相等的话使A部分权值大于B部分 SOLUTION 由于点权是$2^i$, 所以必定不可能做到两部分权值相等, 只需要A先拿$n$号点, B拿$n-1$号点及其所有与该点相连通的点, 剩余点全给A即可 (题目说有多解, 可是想了想不管怎么样这个解都是唯一的) CODE I - Invested Money签到? 本该是签到题, 可是我们签了1h…(读题读不懂了…. 给出今天是一周的第几天, 以及距离$n$次存款日过了几天 规定只能在存款后的每30天才能有一次取款机会, 若在周末则延迟到周一, 下一次取款日会在上一个可取款日的30日后, 询问距离最近的下一次取款日还需要几天 SOLUTION 只需反推出存款日, 然后分类讨论一下就行了 因为是这么循环的: 2 -&gt; 4 -&gt; 1 -&gt; 3 -&gt; 5 - &gt; 1 -&gt; … CODE M - Most Ordered Way给出$n$个工程, 每个工程需要做$t$分钟, 截止时间为$d$, 求一个字典序最小的合法序列, 或者无解 SOLUTION 贪心 显然, 若没有字典序最小的条件, 直接对$d$从小到大排序即可 但是需要字典序最小, 那么考虑贪心, 先对$d$从小到大排序, 求出一种可行解, 然后考虑能否改变某几个的顺序来做到使字典序变小 于是可以考虑让第$j$个元素排到第$i$个元素的前面, 那么收到影响的只有第$i$个和第$j$个之间的元素, 若改变顺序后该序列依旧合法, 那么就让第$j$个元素排到第$i$个元素的前面即可 稍微推一下就会发现合法的条件有两个: $sump + t_j \\le d_p (i\\le p \\le j)$ 以及 $sum{i-1} + t_j \\le d_j$ 对于第一个式子, 只需要维护$sum_p - d_p$的最大值即可 时间复杂度: $O(n^2)$ CODE J - Joining Pairs给出一个网格图和$n$对点, 问是否存在一种画法使得$n$对点的连线不相交 SOLUTION 显然只有横跨了整个网格的线有可能会相交, 即两端点都在边界上的点对(以下只考虑这种点对) 于是可以顺时针遍历边界, 用一个栈存第一次遇到的点对, 当遇到这对点的第二个点时, 如果此时栈顶不是这点对的另一个点, 那必定是会产生相交的线的, 所以离散化后遍历即可 CODE H - Hamilton - The Musical给出$n$个点两两之间的距离$L{ij}$, 定义一个$n$的排列$p_1, p_2, …, p_n$的权值为$$\\sum L{pi p{i+1}}$$ 现规定$p_i=i$ $(i\\mod2 = 0)$, 求最小的权值 SOLUTION 费用流, 题意可转化为对于剩下的奇数点, 还有奇数个位置做一个最小权的完美匹配, 所以可以直接跑费用流解决, 边权为$i$点在$j$位置时与左右两点的距离和 (复杂度手算了一下大概是$n^3$的, 而时限是0.5s, 没想到还真过了) CODE "},{"title":"2022-09-18周赛","date":"2022-09-17T18:40:47.000Z","url":"/2022/09/18/2022-09-18%E5%91%A8%E8%B5%9B/","tags":[["组队训练","/tags/%E7%BB%84%E9%98%9F%E8%AE%AD%E7%BB%83/"]],"categories":[["组队训练","/categories/%E7%BB%84%E9%98%9F%E8%AE%AD%E7%BB%83/"]],"content":"题目来自: 2021 ICPC Southeastern Europe Regional Contest C - Werewolves给出$n(n \\le 3000)$个点的一棵树, 以及每个点的颜色, 求满足拥有一半以上同种颜色的连通块的个数, 对$998244353$取模 SOLUTION 首先对一种特定颜色$c$考虑, 如果一个点的颜色是$c$就$+1$, 不是就$-1$, 那么最后只要这个连通块的权值大于$0$, 就可以记入答案中. 那么我们可以考虑树上背包, 用$dp[u][j]$表示$u$点必取时连通块权值为$j$的数量. 然后就可以推出转移式是: $dp[u][k] = dp[u][k - j] * dp[v][j]$ 由于可能出现负的权值, 可以给第二维整体加上一个值来避免出现负值 众所周知，一棵$n$点的树, 背包容量为$m$, 进行树上背包时如果上下界都卡紧了复杂度会是$O(nm)$ 具体证明可以看这个 那么在这个问题里, 对特定颜色考虑时, 背包容量最大是$c_i$(颜色为$c$的点的个数), 所以单次背包的时间复杂度是$O(nc_i)$ 所以对每种颜色都跑一遍的复杂度就是$O(n\\sum c_i)$, 由于$\\sum c_i = n$, 所以总复杂度为$O(n ^ 2)$ CODE K - Amazing Tree给出一棵树, 让你选择一个根使以这个根节点开始的先序遍历的字典序是最小的 SOLUTION 无论选哪个点为根, 先序遍历的第一个值肯定是某一个叶子结点. 那么第一个值肯定是所有叶子结点中最小的那一个, 然后考虑与它相连的$v$点, 如果除去最小的叶子结点外与$v$结点直接相连的还有两个及以上的点, 那么根据先序遍历的顺序, 之后还会往$v$结点的儿子结点遍历. 这个时候可以考虑贪心, 优先向有更小编号的叶子结点的点方向遍历. 当与$v$结点相连的点只剩一个的时候, 此时$v$点有两种可能, $v$是根节点或不是, 若它不是根节点, 那么下一个遍历的点就是它自己. 如果$v$是根节点, 那么就会先向它最后一个儿子结点处先遍历, 然后最后才遍历$v$. 于是只需要贪心的选择小的就行了, 如果$v$比最后一个儿子结点处的叶子结点编号小, 那么$v$就不是根节点, 继续往下$dfs$找根, 反之根节点就确定了, 停止$dfs$直接输出答案 CODE "},{"title":"题目合集","date":"2022-08-01T03:45:14.000Z","url":"/2022/08/01/%E5%A5%BD%E9%A2%98%E5%90%88%E9%9B%86/","tags":[["题集","/tags/%E9%A2%98%E9%9B%86/"]],"categories":[["题集","/categories/%E9%A2%98%E9%9B%86/"]],"content":"模拟jiubei and regexp CODE jiubei and website CODE jiubei and vscode CODE All in CODE Jiubei And Hearthstone Battlegrounds CODE jiubei and pstree CODE jiubei and TFT CODE jiubei and sgs CODE 树上问题CCPC高职场L SOLUTION 树上背包 CODE Monkey Joe SOLUTION 考虑计算每个点产生的贡献 经过手玩数据以及胡乱推导可以发现, 对于一个点$x$, 它所产生的贡献为{Val_x}\\sum\\limits_{Val_y \\le Val_x}{含有(x, y)点对的路径个数} 因此$y$可以分为以下三类: $y$在$x$的子树中 $y$为$x$的祖先 其他 对于第一类, 枚举$x$的每一个儿子, 计算该儿子的子树里合法的$y$的贡献即可, 这个贡献值为\\sum\\limits_{y \\in son_i} size_y \\times (n - size_{son_i}) 至于快速计算上面这个式子的值, 可以用主席树 对于第二类, 在$dfs$的过程中可以顺便记录$x$的祖先信息, 可以用树状数组维护, 贡献值式子和上面那个差不多 对于第三类, 其实就是那些满足$Val_y \\le Val_x$条件且不为$x$子树或祖先的$y$, 贡献值为${size_x}\\sum{size_y}$ 这个式子中的$\\sum{size_y}$可以用所有的符合条件的总和减去在子树中的和祖先中的部分 除此之外, 要注意在第一类中$y$是可以等于$x$的, 此时的路径个数可以分成两部分计算(路径两端点都在$x$子树中和一端在子树中另一端不在子树中) CODE "}]